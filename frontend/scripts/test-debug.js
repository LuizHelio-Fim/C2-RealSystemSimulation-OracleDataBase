// test-debug.js - Fun√ß√µes de teste e diagn√≥stico

// ===== FUN√á√ïES DE TESTE E DIAGN√ìSTICO =====

async function testBackendConnection() {
  try {
    console.log('üîÑ [TESTE] Testando conex√£o com backend...');
    showLoading('Testando conex√£o com backend...');
    
    // Teste 1: Verificar se as fun√ß√µes existem
    console.log('1Ô∏è‚É£ Verificando fun√ß√µes de relat√≥rios...');
    console.log('apiService existe?', typeof apiService !== 'undefined');
    console.log('getCourseStatistics existe?', typeof apiService.getCourseStatistics === 'function');
    console.log('getOffersCompleteReport existe?', typeof apiService.getOffersCompleteReport === 'function');
    
    // Teste 2: Conex√£o b√°sica
    console.log('2Ô∏è‚É£ Testando endpoint raiz...');
    const connectionTest = await apiService.testConnection();
    console.log('‚úÖ Conex√£o b√°sica OK:', connectionTest);
    
    // Teste 3: Endpoint de reports
    console.log('3Ô∏è‚É£ Testando endpoint de reports...');
    const reportsTest = await apiService.testReportsEndpoint();
    console.log('‚úÖ Endpoint de reports OK:', reportsTest);
    
    // Teste 4: Tentar chamar as fun√ß√µes espec√≠ficas
    console.log('4Ô∏è‚É£ Testando chamadas espec√≠ficas...');
    
    try {
      const courseStats = await apiService.getCourseStatistics();
      console.log('‚úÖ getCourseStatistics funcionou:', courseStats);
    } catch (err) {
      console.log('‚ùå getCourseStatistics falhou:', err.message);
    }
    
    try {
      const offersReport = await apiService.getOffersCompleteReport();
      console.log('‚úÖ getOffersCompleteReport funcionou:', offersReport);
    } catch (err) {
      console.log('‚ùå getOffersCompleteReport falhou:', err.message);
    }
    
    hideLoading();
    showNotification('Testes de conectividade conclu√≠dos! Verifique o console para detalhes.', 'success');
    
  } catch (error) {
    console.error('‚ùå [TESTE] Erro durante os testes:', error);
    hideLoading();
    showNotification(`Erro nos testes: ${error.message}`, 'error');
  }
}

// Fun√ß√£o de debug r√°pido
function debugApiService() {
  console.log('üîç [DEBUG] Informa√ß√µes sobre apiService:');
  console.log('- apiService existe?', typeof apiService !== 'undefined');
  console.log('- apiService √© um objeto?', typeof apiService === 'object');
  if (typeof apiService === 'object' && apiService !== null) {
    console.log('- M√©todos dispon√≠veis:', Object.getOwnPropertyNames(Object.getPrototypeOf(apiService)));
  }
  console.log('- getCourseStatistics existe?', typeof apiService.getCourseStatistics === 'function');
  console.log('- getOffersCompleteReport existe?', typeof apiService.getOffersCompleteReport === 'function');
  
  return apiService;
}

// Teste r√°pido no console do browser
console.log('üöÄ Arquivo de teste carregado! Use as fun√ß√µes:');
console.log('- debugApiService() - para debug b√°sico');
console.log('- testBackendConnection() - para teste completo');